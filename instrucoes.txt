# Json

JSON (JavaScript Object Notation) é um formato de dados leve e amplamente utilizado para troca de informações entre sistemas. 
É uma maneira de representar dados estruturados usando objetos JavaScript, que são facilmente legíveis por humanos e facilmente 
processados por computadores.

Os dados JSON são armazenados em um formato de texto simples e consistem em pares de chave-valor, onde a chave é uma string que
identifica o valor. Os valores podem ser strings, números, objetos JSON aninhados, arrays JSON ou valores booleanos (true ou false) 
ou null.

O JSON é frequentemente usado em aplicativos da web modernos para transmitir dados entre o cliente e o servidor. 
Ele também é usado em muitas outras áreas, como armazenamento de dados, configuração de aplicativos, entre outros.

{
  "nome": "João",
  "idade": 30,
  "cidade": "São Paulo",
  "telefones": ["123456789", "987654321"]
}

Neste exemplo, temos um objeto com quatro propriedades: "nome", "idade", "cidade" e "telefones". A propriedade "nome" é uma string 
com o valor "João", "idade" é um número com o valor 30, "cidade" é uma string com o valor "São Paulo" e "telefones" é um array 
contendo duas strings com os valores "123456789" e "987654321".

Observe que os nomes das propriedades são sempre colocados entre aspas duplas e separados do valor por um sinal de dois pontos (:). 
Os valores de string também devem estar entre aspas duplas. Além disso, os elementos de um array JSON são separados por vírgulas e o 
array em si é colocado entre colchetes.

## estrutura
{"key":"value"} = {"nome":"robert"}
    string      =>    "conteudo"

["value"]
string, numero, objeto, array, true, false, null

NoSQL - Utiliza JSON

## Site: https://jsonformatter.org/json-editor

EXEMPLO:01
{
  "nome": "robert",
  "tecnologias": [
    "kubernetes",
    "aws"
  ],
  "interesses": [
    "Automacao",
    "Nonitoramento",
    "Containers"
  ],
  "buscando_oportunidades": false
}

EXEMPLO:02
[
  {
  "nome": "robert",
  "tecnologias": ["kubernetes","aws"],
  "interesses": ["Automacao", "Nonitoramento", "Containers"],
  "buscando_oportunidades": false
  },
    {
  "nome": "joao",
  "tecnologias": ["kubernetes","azure"],
  "interesses": ["Automacao", "Nonitoramento", "Containers"],
  "buscando_oportunidades": false
  }
]

## JSON Path

Documentação: https://github.com/json-path/JsonPath

Operators
Operator	Description
$	The root element to query. This starts all path expressions.
@	The current node being processed by a filter predicate.
*	Wildcard. Available anywhere a name or numeric are required.
..	Deep scan. Available anywhere a name is required.
.<name>	Dot-notated child
['<name>' (, '<name>')]	Bracket-notated child or children
[<number> (, <number>)]	Array index or indexes
[start:end]	Array slice operator
[?(<expression>)]	Filter expression. Expression must evaluate to a boolean value.

Functions
Functions can be invoked at the tail end of a path - the input to a function is the output of the path expression. The function output is dictated by the function itself.

Function	Description	Output type
min()	Provides the min value of an array of numbers	Double
max()	Provides the max value of an array of numbers	Double
avg()	Provides the average value of an array of numbers	Double
stddev()	Provides the standard deviation value of an array of numbers	Double
length()	Provides the length of an array	Integer
sum()	Provides the sum value of an array of numbers	Double
keys()	Provides the property keys (An alternative for terminal tilde ~)	Set<E>
concat(X)	Provides a concatinated version of the path output with a new item	like input
append(X)	add an item to the json path output array	like input
first()	Provides the first item of an array	Depends on the array
last()	Provides the last item of an array	Depends on the array
index(X)	Provides the item of an array of index: X, if the X is negative, take from backwards	Depends on the array
Filter Operators		

Filters are logical expressions used to filter arrays. A typical filter would be [?(@.age > 18)] where @ represents the current item being processed. More complex filters can be created with logical operators && and ||. String literals must be enclosed by single or double quotes ([?(@.color == 'blue')] or [?(@.color == "blue")]).

Operator	Description
==	left is equal to right (note that 1 is not equal to '1')
!=	left is not equal to right
<	left is less than right
<=	left is less or equal to right
>	left is greater than right
>=	left is greater than or equal to right
=~	left matches regular expression [?(@.name =~ /foo.*?/i)]
in	left exists in right [?(@.size in ['S', 'M'])]
nin	left does not exists in right
subsetof	left is a subset of right [?(@.sizes subsetof ['S', 'M', 'L'])]
anyof	left has an intersection with right [?(@.sizes anyof ['M', 'L'])]
noneof	left has no intersection with right [?(@.sizes noneof ['M', 'L'])]
size	size of left (array or string) should match right
empty	left (array or string) should be empty

## Site: https://jsonpath.com

EXEMPLO:
{
    "firstName": "John",
    "lastName": "doe",
    "age": 26,
    "address": {
        "streetAddress": "naist street",
        "city": "Nara",
        "postalCode": "630-0192"
    },
    "phoneNumbers": [
        {
            "type": "iPhone",
            "number": "0123-4567-8888"
        },
        {
            "type": "home",
            "number": "0123-4567-8910"
        },
                {
            "type": "trabalho",
            "number": "9999999999"
        }
    ]
}

No campo: JSONPath Syntax
$                                         - Retorna todo o conteudo do json (Raiz)
$.age                                     - Retorna o campo idade (resultado = 26)
$.address                                 - Retorna o campo endereço
$.address.postalCode                      - Retorna o campo postalCode
$.phoneNumbers[0]                         - Primeiro item da lista
$.phoneNumbers[0].number                  - Primeiro item da lista / Numero de telefone
$.phoneNumbers[?(@.number=="9999999999")] - Retona o 'type' do numero = "9999999999" (filtro)
$.phoneNumbers[?(@.type=="home")]         - Retona o 'numero' do 'type' = "home" (filtro)
$.phoneNumbers[?(@.type!="home")]         - Retorna tudo que é diferente de "home" (filtro)
$.phoneNumbers[?(@.type!="home")].number  - Retorna apenas os campos "numeros" (filtro)




